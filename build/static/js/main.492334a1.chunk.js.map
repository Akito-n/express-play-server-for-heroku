{"version":3,"sources":["serviceWorker.js","components/Note.tsx","services/notes.ts","components/Notifcation.tsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","res","data","newObject","post","id","updateObject","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","find","changeNote","returnedNote","catch","error","setTimeout","n","toggleImportanceOf","key","onSubmit","event","preventDefault","target","noteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.492334a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from 'react';\n\nconst Note = ({ note, toggleImportance }: any) => {\n  const label = note.important ? 'make not important' : 'make important'\n\nreturn <li className='note'>{note.content}<button onClick={toggleImportance}>{label}</button></li>;\n};\n\nexport default Note;\n","import axios from 'axios'\nconst baseUrl = 'https://express-play-server.herokuapp.com/api/notes'\n\ninterface NoteProp {\n  id: number,\n  content: string,\n  date: string,\n  important: boolean\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(res => res.data)\n}\n\nconst create = (newObject: NoteProp) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(res => res.data)\n}\n\nconst update = (id: number, updateObject: NoteProp) => {\n  const request =  axios.put(`${baseUrl}/${id}`, updateObject)\n  return request.then(res => res.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update\n}\n","import React from 'react'\n\n\nconst Notification = ({message}: any) => {\n  if(message === null){\n    return null\n  }\n\n  return(\n  <div className='error'>{message}</div>\n  )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note.tsx';\nimport './App.css';\nimport noteService from './services/notes.ts'\nimport Notification from './components/Notifcation.tsx'\n\nconst App = () => {\n  const [ notes, setNotes ] = useState([]);\n  const [ newNote, setNewNote ] = useState('a new note...');\n  const [ showAll, setShowAll ] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    console.log('effect')\n\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes)\n    })\n\n  }\n\n  useEffect(hook, [])\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log('button clicked', event.target);\n\n    const noteObject = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    };\n\n    noteService.create(noteObject)\n    .then(returnedNote=> {\n      setNotes(notes.concat(returnedNote))\n    })\n\n    // setNotes(notes.concat(noteObject));\n    setNewNote('');\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(note => note.id === id)\n    const changeNote = {...note, important: !note.important}\n    noteService.update(id, changeNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    }).catch(error => {\n      setErrorMessage(`note ${note.content} was already removed from server`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n    setNotes(notes.filter(n => n.id !== id))\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>show {showAll ? 'important' : 'All'}</button>\n      </div>\n      <Notification message={errorMessage} />\n      <ul>{notesToShow.map((note) => <Note note={note} toggleImportance={() => toggleImportanceOf(note.id)} key={note.id} />)}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App.js';\n\n// const History = (props) => {\n//   if (props.allClicks.length === 0) {\n//     return <div> the app is used by pressing the buttons</div>;\n//   }\n//   return <div>buttons press History: {props.allClicks.join(' ')}</div>;\n// };\n\n// const Button = ({ handleClick, text }) => {\n//   return <button onClick={handleClick}>{text}</button>;\n// };\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}